<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_kiwib_haumaru_remediation_task</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_kiwib_haumaru_remediation_task">remediation_task_type=2^stateCHANGESTO3^EQ<item display_value="Check the checker" endquery="false" field="remediation_task_type" goto="false" newquery="false" operator="=" or="false" value="2"/>
            <item display_value="Closed" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="false" value="3"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>(KB) Chk the chkr survey compare</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	//Get Survey instance id
	var isDiff = false;

	//First Get all the assessment instance by case sys_id and task sys_id, and make sure the case one comes first.
	var ids = current.parent.sys_id.toString() + ',' + current.sys_id.toString();
	var astAnswers = [];
	var astm = new GlideRecord('asmt_assessment_instance');
	astm.addQuery('task_id', 'IN', ids);
	astm.orderBy('sys_created_on'); //make sure the case survey will get selected first
	astm.query();
	while(astm.next()){
		var oneAns = new x_kiwib_haumaru.KBHaumaruUtil().getAllSurveyAnswers(astm.sys_id);		
		astAnswers.push(oneAns);
	}

	var caseAnswers =  astAnswers[0];
	var taskAnswers =  astAnswers[1];

	//Getting Case Survey Answers
	var caseFirstLevel = caseAnswers.firstLevel;
	var caseOtherLevel = caseAnswers.otherLevel;
	var caseSecondLevel = [];

	var caseFirstlen = caseFirstLevel.length; 
	if(caseFirstlen > 0){
		for(var i=0; i<caseFirstlen; i++){	
			var secondRecord = caseOtherLevel.filter(function(element) {return element.parent === caseFirstLevel[i].metric; })[0];
			if(secondRecord){
				caseSecondLevel.push(secondRecord);
			}
		}
	}	
	var caseSecondLen = caseSecondLevel.length;

	//Getting Task Survey Answers
	var taskFirstLevel = taskAnswers.firstLevel;
	var taskOtherLevel = taskAnswers.otherLevel;
	var taskSecondLevel = [];

	var taskFirstlen = caseFirstLevel.length; 
	if(taskFirstlen > 0){
		for(var n=0; n<taskFirstlen; n++){	
			var secondTaskRecord = taskOtherLevel.filter(function(element) {return element.parent === taskFirstLevel[n].metric; })[0];
			if(secondTaskRecord){
				taskSecondLevel.push(secondTaskRecord);
			}
		}
	}
	var taskSecondLen = taskSecondLevel.length;


	//Looping through case first level questions
	var desc = '';
	for(var idx = 0; idx < caseFirstlen; idx++){


		var secondLevelCaseRecord = caseOtherLevel.filter(function(element) { return element.parent === caseFirstLevel[idx].metric; })[0];			
		var thirdLevelCaseRecord = {};
		var secondLevelTaskRecord = taskOtherLevel.filter(function(element) { return element.parent === taskFirstLevel[idx].metric; })[0];
		var thirdLevelTaskRecord = {};

		//If the first level question are very different answer
		if(caseFirstLevel[idx].string_value != taskFirstLevel[idx].string_value){
			isDiff = true;

			desc += caseFirstLevel[idx].category + '\n' + caseFirstLevel[idx].question + '\n';
			desc += 'Old Answer: ' + caseFirstLevel[idx].string_value ;

			if(secondLevelCaseRecord && secondLevelCaseRecord.string_value){
				desc +=  '\nReason: ' + secondLevelCaseRecord.string_value ;
				thirdLevelCaseRecord = caseOtherLevel.filter(function(element) { return element.parent === secondLevelCaseRecord.metric; })[0];
			} 

			if(thirdLevelCaseRecord && thirdLevelCaseRecord .string_value){
				desc += ' - ' + thirdLevelCaseRecord.string_value ;
			} 

			desc += '\n\n';
			desc += 'New Answer: ' + taskFirstLevel[idx].string_value ;

			if(secondLevelTaskRecord && secondLevelTaskRecord.string_value){
				desc += '\nReason: ' + secondLevelTaskRecord.string_value ;
				thirdLevelTaskRecord = taskOtherLevel.filter(function(element) { return element.parent === secondLevelTaskRecord.metric; })[0];
			} 

			if(thirdLevelTaskRecord && thirdLevelTaskRecord.string_value){
				desc += ' - ' + thirdLevelTaskRecord.string_value ;
			} 

			desc += '\n\n----------------------------------\n\n';
		}else{
			//Even if the first are the same answer, the second level could be different
			if(secondLevelCaseRecord && secondLevelTaskRecord && (secondLevelCaseRecord.string_value != secondLevelTaskRecord.string_value)){
				isDiff = true;

				desc += caseFirstLevel[idx].category + '\n' + caseFirstLevel[idx].question + '\n';
				desc += 'Old Answer: ' + caseFirstLevel[idx].string_value ;

				if(secondLevelCaseRecord && secondLevelCaseRecord.string_value){
					desc +=  '\nReason: ' + secondLevelCaseRecord.string_value ;
					thirdLevelCaseRecord = caseOtherLevel.filter(function(element) { return element.parent === secondLevelCaseRecord.metric; })[0];
				} 

				if(thirdLevelCaseRecord && thirdLevelCaseRecord .string_value){
					desc += ' - ' + thirdLevelCaseRecord.string_value ;
				} 

				desc += '\n\n';
				desc += 'New Answer: ' + taskFirstLevel[idx].string_value ;

				if(secondLevelTaskRecord && secondLevelTaskRecord.string_value){
					desc += '\nReason: ' + secondLevelTaskRecord.string_value ;
					thirdLevelTaskRecord = taskOtherLevel.filter(function(element) { return element.parent === secondLevelTaskRecord.metric; })[0];
				} 

				if(thirdLevelTaskRecord && thirdLevelTaskRecord.string_value){
					desc += ' - ' + thirdLevelTaskRecord.string_value ;
				} 
				desc += '\n\n----------------------------------\n\n';
			}

		}

	}//End of Looping

	var msg = 'All Assessment answers are identical. No moderation required.';
	if(isDiff){
		var remTask = new GlideRecord('x_kiwib_haumaru_remediation_task');
		remTask.initialize();
		remTask.parent = current.parent.toString();
		remTask.supervisor = current.supervisor;
		remTask.advisor = current.advisor;
		remTask.product = current.product;
		remTask.assigned_to = current.assigned_to;
		remTask.remediation_task_type = current.remediation_task_type;
		remTask.time_frame = current.time_frame;
		remTask.remediation_action = '7';
		remTask.description = desc;
		remTask.insert();
		msg = 'Some answers are different, a moderation task has been generated.';	
		
	}
	gs.addInfoMessage(msg);
	//action.setRedirectURL(remTask);


})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>Bing.Liu@kiwibank.co.nz</sys_created_by>
        <sys_created_on>2021-07-07 05:04:13</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>94ae18c01b15f450533e0dc8ec4bcb68</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>(KB) Chk the chkr survey compare</sys_name>
        <sys_overrides/>
        <sys_package display_value="Pae Haumaru" source="x_kiwib_haumaru">001ccea01b89205038c9ffbbdc4bcb2c</sys_package>
        <sys_policy/>
        <sys_scope display_value="Pae Haumaru">001ccea01b89205038c9ffbbdc4bcb2c</sys_scope>
        <sys_update_name>sys_script_94ae18c01b15f450533e0dc8ec4bcb68</sys_update_name>
        <sys_updated_by>Bing.Liu@kiwibank.co.nz</sys_updated_by>
        <sys_updated_on>2021-07-07 05:04:13</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=94ae18c01b15f450533e0dc8ec4bcb68"/>
</record_update>
