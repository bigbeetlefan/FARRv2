<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_kiwib_haumaru.KBHaumaruAjax</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>KBHaumaruAjax</name>
        <script><![CDATA[var KBHaumaruAjax = Class.create();
KBHaumaruAjax.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

	getDRSysids: function(){
		var userId = gs.getUserID();
		var farrUtil = new KBHaumaruUtil();
		var idStr = farrUtil.getSearchQueryString(userId);
		var idString = idStr.replace('assigned_toIN','');
		return idString;
	},	

	getAssessmentState: function(){
		var caseId = this.getParameter('sysparm_caseid');
		var astm = new GlideRecord('asmt_assessment_instance');
		astm.addQuery('task_id', caseId);
		var astm2 = astm.addQuery('state','ready');
		astm2.addOrCondition('state','wip');
		astm.query();
		if(astm.next()){
			return false;
		}
		return true;
	},

	anyOpenTask: function(){
		var caseId = this.getParameter('sysparm_caseid');
		var astm = new GlideRecord('x_kiwib_haumaru_remediation_task');
		astm.addQuery('parent', caseId);
		astm.addQuery('active', true);
		astm.query();
		if(astm.next()){
			return true;
		}
		return false;
	},	

	cancelAssessment: function(){
		var caseId = this.getParameter('sysparm_caseid');
		var astm = new GlideRecord('asmt_assessment_instance');
		astm.addQuery('task_id', caseId);		
		astm.query();
		if(astm.next()){
			astm.state = 'canceled';
			astm.update();
			return true;
		}
		return true;
	},

	remediatSurvey: function(){
		var caseId = this.getParameter('sysparm_caseid');
		var astm = new GlideRecord('asmt_assessment_instance');
		//astm.addQuery('trigger_table', '');
		//astm.addQuery('trigger_id', '');
		astm.addQuery('task_id', caseId);
		//var astm2 = astm.addQuery('state','complete');
		//astm2.addOrCondition('state','canceled');
		astm.orderByDesc('sys_created_on');
		astm.setLimit(1);
		astm.query();
		if(astm.next()){
			if(astm.state == 'complete'){
				return this._generateRemediationTask(caseId,astm.sys_id.toString());
			}else{
				return false;
			}			
		}else{
			return true;
		}

	},

	addCheckCheckerTask: function(){
		var caseId = this.getParameter('sysparm_caseid');
		var caseGr = new GlideRecord('x_kiwib_haumaru_case');
		caseGr.get(caseId);

		var taskGr = new GlideRecord('x_kiwib_haumaru_remediation_task');
		taskGr.initialize();
		taskGr.supervision_case = caseId;
		taskGr.parent = caseId;
		taskGr.product = caseGr.product;
		taskGr.advisor = caseGr.assigned_to;
		taskGr.assigned_to = gs.getUserID();
		taskGr.supervisor = gs.getUserID();
		taskGr.remediation_task_type = '2';
		taskGr.remediation_action = '6';
		taskGr.time_frame = '1';
		taskGr.description = 'Enable consistency when it comes to interpretation of diligent care reviews. Enabling an environment to challenge, learn and develop quality supervision that we can assure is driving the same outcomes and behaviours across all who conduct it.';
		return taskGr.insert();

	},


	countDirectReports: function(){
		var userSysId = this.getParameter('sysparm_user_sys_ids');
		var count = new GlideAggregate('sys_user');
		count.addEncodedQuery('managerIN' + userSysId);
		count.addAggregate('COUNT');
		count.query();
		var directRpts = 0;
		if (count.next()){
			directRpts = count.getAggregate('COUNT');
		}   
		return directRpts;
	},

	allCalculations: function(){
		var _startDate = this.getParameter('sysparm_start_date');
		var _endDate = this.getParameter('sysparm_end_date');

		var startDate = new GlideDateTime(_startDate);
		var endDate = new GlideDateTime(_endDate);

		var teamMembers = this.getParameter('sysparm_team_members');

		//First setup an empty record
		var result = {'neg_completed': 0,'neg_advice_given': 0,'exc_case': 0,'std_case': 0,'real_time': 0,'retro': 0,'role_play': 0,'other': 0,'checker': 0, 'open_reps': 0, 'close_reps': 0, 'open_cust': 0, 'close_cust': 0, 'missed_sla':0, 'overdue_sla': 0, 'task_coaching': 0, 'task_inform_reps': 0, 'task_discuss_reps': 0, 'task_training': 0, 'task_customer_action': 0, 'task_checker': 0, 'task_moderation': 0};

		if(startDate && endDate && teamMembers){
			var caseGr = new GlideRecord('x_kiwib_haumaru_case');
			//caseGr.addQuery('sys_created_on', '>=', startDate);
			//caseGr.addQuery('sys_created_on', '<=', endDate);
			caseGr.addQuery('assigned_to','IN',teamMembers);
			caseGr.query();

			while(caseGr.next()){
				//Check all exception cases Open and Close
				if(caseGr.category == 'exception'){
					if(caseGr.sys_created_on >= startDate && caseGr.sys_created_on <= endDate){
						result.exc_case++;
					}
				}else{ //Below are all supervision category					

					//When case is closed/Remediation/In progress
					if(caseGr.state == '3' || caseGr.state == '2' || caseGr.state == '1'){
						if(caseGr.sub_category == 'negative_assurance'){
							if(caseGr.closed_date_time >= startDate && caseGr.closed_date_time <= endDate){
								result.neg_completed++;
								if(caseGr.review_outcome == 'advice_given'){
									result.neg_advice_given++;
								}
							}							
						}else{
							if(caseGr.assessment_completed >= startDate && caseGr.assessment_completed <= endDate){
								result.std_case++;
								if(caseGr.method == 'retrospective'){
									result.retro++;
								}
								if(caseGr.method == 'real_time'){
									result.real_time++;
								}
								if(caseGr.method == 'role_play'){
									result.role_play++;
								}
								if(caseGr.method == 'other'){
									result.other++;
								}
							}										
						}

					}
				}
			}

			//Remediation Calculation
			var taskGrCount = new GlideRecord('x_kiwib_haumaru_remediation_task');			
			taskGrCount.addQuery('supervisor','IN', teamMembers);		
			taskGrCount.query();  
			while(taskGrCount.next()) {				
				if(taskGrCount.remediation_task_type == '2'){ //Check the checker type
					if(taskGrCount.closure_datetime >= startDate && taskGrCount.closure_datetime <= endDate && taskGrCount.remediation_action != '7'){
						result.checker++;
					}				
				}else{
					//Below are all normal remediation tasks, not the check the checker task
					//use created date for the date range.
					if(taskGrCount.sys_created_on >= startDate && taskGrCount.sys_created_on <= endDate){

						if(taskGrCount.remediation_action == '1'){
							result.task_coaching++;
						}else if(taskGrCount.remediation_action == '3'){
							result.task_inform_reps++;
						}else if(taskGrCount.remediation_action == '4'){
							result.task_discuss_reps++;
						}else if(taskGrCount.remediation_action == '5'){
							result.task_training++;
						}else if(taskGrCount.remediation_action == '6'){
							result.task_checker++;
						}else if(taskGrCount.remediation_action == '2'){
							result.task_customer_action++;
						}else{
							result.task_moderation++;
						}
					}

					if(taskGrCount.state == '1' || taskGrCount.state == '0'){ //open Remediation task
						var slaGr = new GlideRecord('task_sla');
						
						if(taskGrCount.remediation_action == '2'){ //customer action required
							result.open_cust++;								
							
							slaGr.addQuery('task', taskGrCount.sys_id);
							slaGr.addQuery('has_breached', true);
							slaGr.addQuery('stage', '!=', 'cancelled');
							slaGr.query();
							if(slaGr.next()){
								result.overdue_sla++;
							}
						}else{ //Inform the nominated rep
							result.open_reps++;							
							slaGr.addQuery('task', taskGrCount.sys_id);
							slaGr.addQuery('has_breached', true);
							slaGr.addQuery('stage', '!=', 'cancelled');
							slaGr.query();
							if(slaGr.next()){
								result.missed_sla++;
							}
						}
					}

					if(taskGrCount.closure_datetime >= startDate && taskGrCount.closure_datetime <= endDate && taskGrCount.state == '3'){ //state = closed remediation task
						var slaGr2 = new GlideRecord('task_sla');
						if(taskGrCount.remediation_action == '2'){ //customer action required
							result.close_cust++;							
							slaGr2.addQuery('task', taskGrCount.sys_id);
							slaGr2.addQuery('has_breached', true);
							slaGr.addQuery('stage', '!=', 'cancelled');
							slaGr2.query();
							if(slaGr2.next()){
								result.overdue_sla++;
							}
						}else{ //Inform the nominated rep
							result.close_reps++;
							slaGr2.addQuery('task', taskGrCount.sys_id);
							slaGr2.addQuery('has_breached', true);
							slaGr.addQuery('stage', '!=', 'cancelled');
							slaGr2.query();
							if(slaGr2.next()){
								result.missed_sla++;
							}
						}

					}
				}
			}
		}

		var jsonStr = JSON.stringify(result);//JSON formatted string
		return jsonStr;
	},

	_generateRemediationTask: function(caseId,instanceId){
		// Add your code here
		if(!instanceId){
			return false;
		}

		var answers = new KBHaumaruUtil().getAllSurveyAnswers(instanceId);
		var firstLevel = answers.firstLevel;
		var otherLevel = answers.otherLevel;
		var secondLevel = [];

		var firstlen = firstLevel.length; 
		if(firstlen > 0){
			for(var i=0; i<firstlen; i++){	
				var secondRecord = otherLevel.filter(function(element) {return element.parent === firstLevel[i].metric; })[0];
				if(secondRecord){
					secondLevel.push(secondRecord);
				}
			}
		}else{
			return false;			
		}
		var secondLen = secondLevel.length;
		/*
		Most the question answer has value of 4 digits, e.g. 1201
		1st Digit: is too set the order of the answer selection
		2nd Digit: is to set remediation action dropdown: coaching(1), customer(2), etc...
		3rd Digit: is to set the time frame for the remediation task
		4th Digit: is to determine the customer remediation task is required 1 is yes, 0 is no
		*/
		if(secondLen > 0){
			var caseGr = new GlideRecord('x_kiwib_haumaru_case');					
			caseGr.get(caseId);
			var numTask = 0;
			var groupedAnswers = {};

			for(var n=0; n<secondLen; n++){	
				if(secondLevel[n].actual_value){
					var valStr = secondLevel[n].actual_value.toString();
					if(valStr && valStr.substring(1) != '000' && valStr.length > 3){

						/* Generate Grouped Task */
						var remTask = {};
						remTask.parent = caseId;
						remTask.supervisor = caseGr.assigned_to;
						remTask.advisor = caseGr.advisor;
						remTask.product = caseGr.product;
						remTask.assigned_to = caseGr.assigned_to;
						var firstLevelRecord = firstLevel.filter(function(element) { return element.metric === secondLevel[n].parent; })[0];
						var secondLevelRecord = otherLevel.filter(function(element) { return element.parent === secondLevel[n].metric;})[0];
						remTask.description = firstLevelRecord.category + ': ' + firstLevelRecord.question + '\nAnswer: ' + firstLevelRecord.string_value + '\nReason: ' + secondLevel[n].string_value;
						if(secondLevelRecord && secondLevelRecord.string_value != ''){
							remTask.description += ' - ' + secondLevelRecord.string_value;
						}
						remTask.description += '\n\n';
						var secondDigit = valStr.substring(1,2);

						//Group by 2nd digit
						if(secondDigit != '0'){	
							numTask++;
							remTask.remediation_action = secondDigit;
							remTask.time_frame = valStr.substring(2,3);
							remTask.customer_action = valStr.substring(3,4);

							if(!groupedAnswers[secondDigit]){
								groupedAnswers[secondDigit] = {};
								groupedAnswers[secondDigit].parent = remTask.parent;
								groupedAnswers[secondDigit].supervisor = remTask.supervisor;
								groupedAnswers[secondDigit].advisor = remTask.advisor;
								groupedAnswers[secondDigit].product = remTask.product;
								groupedAnswers[secondDigit].assigned_to = remTask.assigned_to;
								groupedAnswers[secondDigit].time_frame = remTask.time_frame;
								if(secondDigit != '9'){
									groupedAnswers[secondDigit].remediation_action = remTask.remediation_action;
								}else{
									groupedAnswers[secondDigit].remediation_action = '';
									groupedAnswers[secondDigit].time_frame = '';
								}
								groupedAnswers[secondDigit].customer_action = remTask.customer_action;
								groupedAnswers[secondDigit].description = remTask.description;
								//groupedAnswers[secondDigit] = remTask;
							}else{
								groupedAnswers[secondDigit].description += remTask.description;
							}						

						}

						//group customer actions
						if(valStr.substring(3,4) != '0'){
							numTask++;
							if(!groupedAnswers.customer){
								groupedAnswers.customer = {};
								groupedAnswers.customer.parent = remTask.parent;
								groupedAnswers.customer.supervisor = remTask.supervisor;
								groupedAnswers.customer.advisor = remTask.advisor;
								groupedAnswers.customer.product = remTask.product;
								groupedAnswers.customer.assigned_to = remTask.assigned_to;
								groupedAnswers.customer.remediation_action = '2'; //Customer
								groupedAnswers.customer.time_frame = '4';  //5 days
								groupedAnswers.customer.customer_action = valStr.substring(3,4);
								groupedAnswers.customer.description = 'Note: Customer action required.\n\n' + remTask.description;
								//groupedAnswers.customer = remTask;
							}else{
								groupedAnswers.customer.description += remTask.description;
							}
						}//end of group customer action if					

					}//end of substring(1) != 000

				}//end of secondLevel[n].actual_value

			}//end of for loop of secondLen 

			for(var prop in groupedAnswers){
				if(prop){
					var newRemTask = new GlideRecord('x_kiwib_haumaru_remediation_task');
					newRemTask.initialize();
					newRemTask.parent = groupedAnswers[prop].parent;
					newRemTask.supervisor = groupedAnswers[prop].supervisor;
					newRemTask.advisor = groupedAnswers[prop].advisor;
					newRemTask.product = groupedAnswers[prop].product;
					newRemTask.assigned_to =groupedAnswers[prop].assigned_to;
					newRemTask.description = groupedAnswers[prop].description;
					newRemTask.remediation_action = groupedAnswers[prop].remediation_action;
					newRemTask.time_frame = groupedAnswers[prop].time_frame;
					newRemTask.customer_action = groupedAnswers[prop].customer_action;
					newRemTask.insert();
				}
			}			
		}//End of If secondLen > 0

		//if there are task created then send email notification
		if(numTask){
			gs.eventQueue('x_kiwib_haumaru.haumaru.rem_task.insert',caseGr,caseId,instanceId);			
		}

		caseGr.comments = 'Assessment has been completed.';
		//caseGr.state = '2'; //Remediation
		caseGr.update();
		return true;
	},

	type: 'KBHaumaruAjax'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>Bing.Liu@kiwibank.co.nz</sys_created_by>
        <sys_created_on>2021-06-27 23:45:07</sys_created_on>
        <sys_id>c24f70011bc574d0533e0dc8ec4bcb27</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>KBHaumaruAjax</sys_name>
        <sys_package display_value="Pae Haumaru" source="x_kiwib_haumaru">001ccea01b89205038c9ffbbdc4bcb2c</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Pae Haumaru">001ccea01b89205038c9ffbbdc4bcb2c</sys_scope>
        <sys_update_name>sys_script_include_c24f70011bc574d0533e0dc8ec4bcb27</sys_update_name>
        <sys_updated_by>Bing.Liu@kiwibank.co.nz</sys_updated_by>
        <sys_updated_on>2021-06-28 03:32:37</sys_updated_on>
    </sys_script_include>
</record_update>
